{"version":3,"file":"UseUpdates.types.js","sourceRoot":"","sources":["../src/UseUpdates.types.ts"],"names":[],"mappings":"","sourcesContent":["import Constants from 'expo-constants';\nimport type { UpdatesLogEntry } from 'expo-updates';\n\nexport type ClassicManifest = NonNullable<typeof Constants.manifest>;\n\nexport type Manifest = ClassicManifest | NonNullable<typeof Constants.manifest2>;\n\n/**\n * Structure encapsulating information on the currently running app\n * (either the embedded bundle or a downloaded update).\n */\nexport type CurrentlyRunningInfo = {\n  /**\n   * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n   * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n   * will always use lowercase letters. In development mode, or any other environment in which\n   * `expo-updates` is disabled, this value is `null`.\n   */\n  updateId: string | null;\n  /**\n   * The channel name of the current build, if configured for use with EAS Update. `null` otherwise.\n   */\n  channel: string | null;\n  /**\n   * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update\n   * that's currently running (whether it was embedded or downloaded at runtime).\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n   * `null`.\n   */\n  createdAt: Date | null;\n  /**\n   * This will be true if the currently running update is the one embedded in the build,\n   * and not one downloaded from the updates server.\n   */\n  isEmbeddedLaunch: boolean;\n  /**\n   * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n   * you don't need to worry about backwards compatibility when you put out an update. In very rare\n   * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n   * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n   * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n   * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n   * can use this constant to provide special behavior for this rare case.\n   */\n  isEmergencyLaunch: boolean;\n  /**\n   * If `expo-updates` is enabled, this is the\n   * [manifest](/workflow/expo-go#manifest) object for the update that's currently\n   * running.\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n   * empty.\n   */\n  manifest: Partial<Manifest> | null;\n  /**\n   * The runtime version of the current build.\n   */\n  runtimeVersion: string | null;\n};\n\n/**\n * Structure representing an available update that has been returned by a call to [`checkForUpdate()`](#checkforupdate)\n * or an [`UpdateEvent`](#updateevent) emitted by native code.\n */\nexport type AvailableUpdateInfo = {\n  /**\n   * A string that uniquely identifies the update. For the manifests used in the current Expo Updates protocol (including\n   * EAS Update), this represents the update's UUID in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)\n   * and will always use lowercase letters.\n   */\n  updateId: string | null;\n  /**\n   * A `Date` object representing the creation time of the update.\n   */\n  createdAt: Date | null;\n  /**\n   * The manifest for the update.\n   */\n  manifest: Manifest;\n};\n\n// Internal type for the callbacks passed into useUpdates()\nexport type UseUpdatesCallbacksType = {\n  onCheckForUpdateStart?: () => void;\n  onCheckForUpdateComplete?: () => void;\n  onCheckForUpdateError?: (error?: Error) => void;\n  onDownloadUpdateStart?: () => void;\n  onDownloadUpdateComplete?: () => void;\n  onDownloadUpdateError?: (error?: Error) => void;\n  onRunUpdateStart?: () => void;\n  onRunUpdateError?: (error?: Error) => void;\n};\n\n// Internal type used to store the state for the useUpdates() hook\n\nexport type UseUpdatesStateType = {\n  availableUpdate?: AvailableUpdateInfo;\n  error?: Error;\n  lastCheckForUpdateTimeSinceRestart?: Date;\n  logEntries?: UpdatesLogEntry[];\n};\n"]}